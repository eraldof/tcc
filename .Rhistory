step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
#Banco 5
receita5 <- recipe(formula = `Y` ~ . , dados5) %>%
step_poly(all_numeric_predictors(), degree = 2) %>%
#step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
#Banco 6
receita6 <- recipe(formula = `Y` ~ . , dados6) %>%
step_poly(all_numeric_predictors(), degree = 2) %>%
#step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
vv = 4L
gg = 20L
randomforest <-
rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
mlp <-
mlp(
hidden_units = tune(),
penalty = tune(),
epochs = tune()
) %>%
set_mode("regression") %>%
set_engine("nnet")
bag_mlp <-
bag_mlp(
hidden_units = tune(),
penalty = tune(),
epochs = tune()
) %>%
set_mode("regression") %>%
set_engine("nnet")
xgb <-
boost_tree(
tree_depth = tune(),
trees = tune(),
learn_rate = tune(),
mtry = tune(),
min_n = tune(),
loss_reduction = tune(),
sample_size = tune(),
stop_iter = tune()
) %>%
set_mode("regression") %>%
set_engine("xgboost")
svm_linear <-
svm_linear(
cost = tune(),
margin = tune()
) %>%
set_mode("regression") %>%
set_engine("kernlab")
svm_rbf <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
) %>%
set_mode("regression") %>%
set_engine("kernlab")
pois <-
poisson_reg(
penalty = tune(),
mixture = tune()
) %>%
set_mode("regression") %>%
set_engine("glmnet")
grid_control <- control_grid(
save_pred = TRUE,
save_workflow = TRUE,
parallel_over = "resamples"
)
metrica <- metric_set(rmse)
vfold1 <-
treinamento1 %>%
vfold_cv(v = vv, strata = Y)
all_wf1 <-
workflow_set(
preproc = list(receita1),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning1 <-
all_wf1 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold1,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning1,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
vfold2 <-
treinamento2 %>%
vfold_cv(v = vv, strata = Y)
all_wf2 <-
workflow_set(
preproc = list(receita2),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning2 <-
all_wf2 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold2,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning2,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
vfold3 <-
treinamento3 %>%
vfold_cv(v = vv, strata = Y)
all_wf3 <-
workflow_set(
preproc = list(receita3),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning3 <-
all_wf3 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold3,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning3,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
vfold4 <-
treinamento4 %>%
vfold_cv(v = vv, strata = Y)
all_wf4 <-
workflow_set(
preproc = list(receita4),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning4 <-
all_wf4 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold4,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning4,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
vfold5 <-
treinamento5 %>%
vfold_cv(v = vv, strata = Y)
all_wf5 <-
workflow_set(
preproc = list(receita5),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning5 <-
all_wf5 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold5,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning5,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
vfold6 <-
treinamento6 %>%
vfold_cv(v = vv, strata = Y)
all_wf6 <-
workflow_set(
preproc = list(receita6),
models = list(
modelo_rf = randomforest,
modelo_mlp = mlp,
modelo_bagmlp = bag_mlp,
modelo_poi = pois,
modelo_svmrbf = svm_rbf,
modelo_svmlinear = svm_linear,
modelo_xgb = xgb
),
cross = TRUE
) %>%
mutate(wflow_id = gsub("(recipe_)", "", wflow_id))
tunning6 <-
all_wf6 %>%
workflow_map(
verbose = TRUE,
seed = 2024,
resamples = vfold6,
control = grid_control,
grid = gg,
metrics = metrica,
)
autoplot(
tunning6,
rank_metric = "rmse",
metric = "rmse",
select_best = TRUE
) +
labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")
best1 <- tunning1 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final1 <-
tunning1 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best1)
teste1 <-
wf_final1 %>%
last_fit(split = splitted1)
knitr::kable(teste1$.metrics, caption = "Resultados")
best2 <- tunning2 %>%
extract_workflow_set_result("modelo_xgb") %>%
select_best(metric = "rmse")
wf_final2 <-
tunning2 %>% extract_workflow("modelo_xgb") %>%
finalize_workflow(best2)
teste2 <-
wf_final2 %>%
last_fit(split = splitted2)
knitr::kable(teste2$.metrics, caption = "Resultados")
best3 <- tunning3 %>%
extract_workflow_set_result("modelo_rf") %>%
select_best(metric = "rmse")
wf_final3 <-
tunning3 %>% extract_workflow("modelo_rf") %>%
finalize_workflow(best3)
teste3 <-
wf_final3 %>%
last_fit(split = splitted3)
knitr::kable(teste3$.metrics, caption = "Resultados")
best4 <- tunning4 %>%
extract_workflow_set_result("modelo_rf") %>%
select_best(metric = "rmse")
wf_final4 <-
tunning4 %>% extract_workflow("modelo_rf") %>%
finalize_workflow(best4)
teste4 <-
wf_final4 %>%
last_fit(split = splitted4)
knitr::kable(teste4$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
best6 <- tunning6 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final6 <-
tunning6 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best6)
teste6 <-
wf_final6 %>%
last_fit(split = splitted6)
knitr::kable(teste6$.metrics, caption = "Resultados")
dados <- read.csv('https://raw.githubusercontent.com/eraldof/tcc/main/base_tratada_v2_kmeans.csv')
colnames(dados) <- c("codcli", "dcadastro", "d1", "d2", "d3", "dmedia", "ddesvio", "r", "f", "v", "Y", "VL_DEV", "QT_DEV", "COMPROU", "clr", "clf", "clv", "rfv", "clusters")
# dados <- dados %>%
#   mutate(Y = ifelse(is.na(Y), 0, Y))
dados <- dados %>%
filter_all(all_vars(!is.na(.)))
#
# dados_censurados <- base_tratada %>%
#   filter_all(any_vars(is.na(.)))
#
best6 <- tunning6 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final6 <-
tunning6 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best6)
teste6 <-
wf_final6 %>%
last_fit(split = splitted6)
knitr::kable(teste6$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
set.seed(2024)
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
set.seed(2024)
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
set.seed(2024)
best1 <- tunning1 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final1 <-
tunning1 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best1)
teste1 <-
wf_final1 %>%
last_fit(split = splitted1)
knitr::kable(teste1$.metrics, caption = "Resultados")
set.seed(2024)
best2 <- tunning2 %>%
extract_workflow_set_result("modelo_xgb") %>%
select_best(metric = "rmse")
wf_final2 <-
tunning2 %>% extract_workflow("modelo_xgb") %>%
finalize_workflow(best2)
teste2 <-
wf_final2 %>%
last_fit(split = splitted2)
knitr::kable(teste2$.metrics, caption = "Resultados")
set.seed(2024)
best3 <- tunning3 %>%
extract_workflow_set_result("modelo_rf") %>%
select_best(metric = "rmse")
wf_final3 <-
tunning3 %>% extract_workflow("modelo_rf") %>%
finalize_workflow(best3)
teste3 <-
wf_final3 %>%
last_fit(split = splitted3)
knitr::kable(teste3$.metrics, caption = "Resultados")
set.seed(2024)
best4 <- tunning4 %>%
extract_workflow_set_result("modelo_rf") %>%
select_best(metric = "rmse")
wf_final4 <-
tunning4 %>% extract_workflow("modelo_rf") %>%
finalize_workflow(best4)
teste4 <-
wf_final4 %>%
last_fit(split = splitted4)
knitr::kable(teste4$.metrics, caption = "Resultados")
set.seed(2024)
best5 <- tunning5 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final5 <-
tunning5 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best5)
teste5 <-
wf_final5 %>%
last_fit(split = splitted5)
knitr::kable(teste5$.metrics, caption = "Resultados")
set.seed(2024)
best6 <- tunning6 %>%
extract_workflow_set_result("modelo_bagmlp") %>%
select_best(metric = "rmse")
wf_final6 <-
tunning6 %>% extract_workflow("modelo_bagmlp") %>%
finalize_workflow(best6)
teste6 <-
wf_final6 %>%
last_fit(split = splitted6)
knitr::kable(teste6$.metrics, caption = "Resultados")
