---
title: "Prevendo o Próximo dia de Compra de um Cliente utilizando Machine Learning"
author: "Eraldo Rocha"
date: last-modified
date-format: "DD MMM, YYYY"

format: 
  html:
    theme: lux
    code-fold: true
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#9400D3"
    highlight-style: github
    code-link: true
    toc: true 
    toc-title: Sumário
    toc-location: left
    toc-depth: 3
    number-depth: 4
    smooth-scroll: true
    
self-contained: true
page-layout: full
editor: source
---

::: callout-note
## Nota

Versão Prévia, documento com única e exclusiva finalidade de expor os resultados obtidos de maneira mais prática e objetiva. Comentários e explicações foram omitidos!
:::

# Carregando Pacotes
```{r, warning = FALSE, message = FALSE}

library(dplyr)
library(readr)
library(ggplot2)
library(tidymodels)
library(patchwork)
library(ggcorrplot)
library(baguette)
library(poissonreg)
tidymodels_prefer()
```

```{r}
rm(list = ls())
DATA = 'https://raw.githubusercontent.com/eraldof/tcc/main/DATA.csv'
DEVOLUCOES = 'https://raw.githubusercontent.com/eraldof/tcc/main/DEVOLUCOES.csv'

DATA <- read.csv(DATA, sep = ";", dec = ",")
DEVOLUCOES <- read.csv(DEVOLUCOES, sep = ";")


colnames(DEVOLUCOES) <-  c("CODCLI", "VL_DEV", "QT_DEV")

DATA$DATA <- as.Date(DATA$DATA, "%d/%m/%Y")

```

```{r}
dados <- DATA %>% group_by(CODCLI, DATA) %>% summarise(VENDAS = sum(VLATEND),
                                                       NUMITENS = sum(NUMITENS),
                                                       LIMCRED = mean(LIMCRED))

rm(DATA)

temp <- dados %>% arrange(DATA) %>% filter(DATA >= as.Date("2024-02-01")) %>% group_by(CODCLI) %>%
  summarise(ultcomp = max(DATA),
            primcomp_depoisjanela = min(DATA))

x <- dados %>% arrange(DATA) %>% filter(DATA < as.Date("2024-02-01")) %>% group_by(CODCLI) %>%
  summarise(dcadastro_dias = as.Date("2024-01-31") - min(DATA),
            d1 = rev(diff(DATA))[1],
            d2 = rev(diff(DATA))[2],
            d3 = rev(diff(DATA))[3],
            dmedia = mean(c(d1,d2,d3)),
            ddesvio = sd(c(d1,d2,d3)),
            freq = n(),
            tgasto = sum(VENDAS),
            ultcompjanela = max(DATA),
  ) %>% filter(freq > 3)


rfv <- tibble(r = as.numeric(as.Date("2024-01-31") - x$ultcompjanela),
              f = x$freq,
              v = x$tgasto,
              CODCLI = x$CODCLI)

teste <- rfv

rfv <- teste %>% filter(r < 100)

x <- x %>% left_join(temp)
x$dia_primcompultcomp <- x$primcomp_depoisjanela - x$ultcompjanela
x <- x %>% select(-c("ultcomp", "primcomp_depoisjanela", "ultcompjanela"))
x <- x %>% left_join(DEVOLUCOES, by = 'CODCLI')


x <- as_tibble(lapply(x, as.numeric))


x <- x %>% mutate(QT_DEV = ifelse(is.na(QT_DEV), 0, QT_DEV),
                  VL_DEV = ifelse(is.na(VL_DEV), 0, VL_DEV),
                  COMPROU = ifelse(is.na(dia_primcompultcomp), "N", "S"))

colnames(x)[10] = "Y"


rfv$r[rfv$r < quantile(rfv$r)[2]] = 4
rfv$r[rfv$r >= quantile(rfv$r)[2] & rfv$r < quantile(rfv$r)[3]] = 3
rfv$r[rfv$r >= quantile(rfv$r)[3] & rfv$r < quantile(rfv$r)[4]] = 2
rfv$r[rfv$r >= quantile(rfv$r)[4]] = 1

rfv$f[rfv$f < quantile(rfv$f)[2]] = 1
rfv$f[rfv$f >= quantile(rfv$f)[2] & rfv$f < quantile(rfv$f)[3]] = 2
rfv$f[rfv$f >= quantile(rfv$f)[3] & rfv$f < quantile(rfv$f)[4]] = 3
rfv$f[rfv$f >= quantile(rfv$f)[4]] = 4

rfv$v[rfv$v < quantile(rfv$v)[2]] = 1
rfv$v[rfv$v >= quantile(rfv$v)[2] & rfv$v < quantile(rfv$v)[3]] = 2
rfv$v[rfv$v >= quantile(rfv$v)[3] & rfv$v < quantile(rfv$v)[4]] = 3
rfv$v[rfv$v >= quantile(rfv$v)[4]] = 4

rfv <- rfv %>% mutate(rfv = r + f + v)

rfv$cluster[rfv$rfv < quantile(rfv$rfv)[2]] = 'bronze customers'
rfv$cluster[rfv$rfv >= quantile(rfv$rfv)[2] & rfv$rfv < quantile(rfv$rfv)[3]] = 'silver customers'
rfv$cluster[rfv$rfv >= quantile(rfv$rfv)[3] & rfv$rfv < quantile(rfv$rfv)[4]] = 'gold customers'
rfv$cluster[rfv$rfv >= quantile(rfv$rfv)[4]] = 'diamond customers'

x <- x %>% right_join(rfv, by = 'CODCLI')

```


```{r}
#url = 'https://raw.githubusercontent.com/eraldof/tcc/main/base_tratada.csv'
dados <- x
colnames(dados) <- c("codcli", "dcadastro", "d1", "d2", "d3", "dmedia", 
                     "ddesvio", "freq", "tgasto", "Y", "VL_DEV", "QT_DEV", "COMPROU", 
                     "r", "f", "v", "rfv", "clusters")
```

# Dados Não-Censurados

- Atribuindo 999 (dias) em clientes que não voltaram a comprar:
```{r}
dados <- dados %>%
  mutate(Y = ifelse(is.na(Y), 0, Y))

# 
# dados_censurados <- base_tratada %>%
#   filter_all(any_vars(is.na(.)))
#
```

```{r}
dados1 <- dados %>% select("r", "f", "v", "d1", "d2", "d3", "VL_DEV", "QT_DEV", "dcadastro", "tgasto", "freq", "Y")
dados2 <- dados %>% select("r", "f", "v", "dmedia", "ddesvio","VL_DEV", "QT_DEV", "dcadastro", "tgasto", "freq", "Y")
dados3 <- dados %>% select("d1", "d2", "d3", "dcadastro", "tgasto", "freq", "clusters", "Y")
dados4 <- dados %>% select("dmedia", "ddesvio", "dcadastro", "tgasto", "freq", "clusters", "Y")
dados5 <- dados %>% select("rfv", "d1", "d2", "d3","VL_DEV", "QT_DEV", "dcadastro", "tgasto", "freq", "Y")
dados6 <- dados %>% select(c("rfv", "dmedia", "ddesvio", "dcadastro", "tgasto", "freq", "VL_DEV", "QT_DEV", "Y"))

```

# Repartindo banco em TRN-70 e TST-30:

```{r}

set.seed(2024)
splitted1 <- initial_split(dados1, prop = 0.7, strata = "Y")
treinamento1 <- training(splitted1)

splitted2 <- initial_split(dados2, prop = 0.7, strata = "Y")
treinamento2 <- training(splitted2)

splitted3 <- initial_split(dados3, prop = 0.7, strata = "Y")
treinamento3 <- training(splitted3)

splitted4 <- initial_split(dados4, prop = 0.7, strata = "Y")
treinamento4 <- training(splitted4)

splitted5 <- initial_split(dados5, prop = 0.7, strata = "Y")
treinamento5 <- training(splitted5)

splitted6 <- initial_split(dados6, prop = 0.7, strata = "Y")
treinamento6 <- training(splitted6)

```

# Receita

```{r}
#Banco 1
receita1 <- recipe(formula = `Y` ~ . , dados1) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

#Banco 2
receita2 <- recipe(formula = `Y` ~ . , dados2) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

#Banco 3
receita3 <- recipe(formula = `Y` ~ . , dados3) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

#Banco 4
receita4 <- recipe(formula = `Y` ~ . , dados4) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

#Banco 5
receita5 <- recipe(formula = `Y` ~ . , dados5) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

#Banco 6
receita6 <- recipe(formula = `Y` ~ . , dados6) %>% 
  step_poly(all_numeric_predictors(), degree = 2) %>%
  #step_interact(terms = ~ all_numeric_predictors():all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

```

# Definindo os Modelos:

```{r}
vv = 10L
gg = 20L

randomforest <- 
  rand_forest(
    mtry = tune(), 
    trees = tune(), 
    min_n = tune()
  ) %>%
  set_mode("regression") %>% 
  set_engine("ranger")

mlp <- 
  mlp(
    hidden_units = tune(),
    penalty = tune(),
    epochs = tune()
  ) %>% 
  set_mode("regression") %>% 
  set_engine("nnet")

bag_mlp <-
  bag_mlp(
    hidden_units = tune(),
    penalty = tune(),
    epochs = tune()
  ) %>%
  set_mode("regression") %>%
  set_engine("nnet")

xgb <-
  boost_tree(
    tree_depth = tune(),
    trees = tune(),
    learn_rate = tune(),
    mtry = tune(),
    min_n = tune(),
    loss_reduction = tune(),
    sample_size = tune(),
    stop_iter = tune()
  ) %>%
  set_mode("regression") %>%
  set_engine("xgboost")

svm_linear <- 
  svm_linear(
    cost = tune(),
    margin = tune()
  ) %>% 
  set_mode("regression") %>% 
  set_engine("kernlab")

svm_rbf <- 
  svm_rbf(
    cost = tune(),
    rbf_sigma = tune(),
    margin = tune()
  ) %>% 
  set_mode("regression") %>% 
  set_engine("kernlab")

pois <-
  poisson_reg(
    penalty = tune(),
    mixture = tune()
  ) %>%
  set_mode("regression") %>%
  set_engine("glmnet")

grid_control <- control_grid(
  save_pred = TRUE,
  save_workflow = TRUE,
  parallel_over = "resamples"
)

metrica <- metric_set(rmse)
```


# Banco 1

```{r}
vfold1 <- 
  treinamento1 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf1 <-
  workflow_set(
    preproc = list(receita1),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning1 <- 
  all_wf1 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold1,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning1,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Banco 2

```{r}
vfold2 <- 
  treinamento2 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf2 <-
  workflow_set(
    preproc = list(receita2),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning2 <- 
  all_wf2 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold2,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning2,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Banco 3

```{r}
vfold3 <- 
  treinamento3 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf3 <-
  workflow_set(
    preproc = list(receita3),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning3 <- 
  all_wf3 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold3,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning3,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Banco 4

```{r}
vfold4 <- 
  treinamento4 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf4 <-
  workflow_set(
    preproc = list(receita4),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning4 <- 
  all_wf4 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold4,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning4,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Banco 5

```{r}
vfold5 <- 
  treinamento5 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf5 <-
  workflow_set(
    preproc = list(receita5),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning5 <- 
  all_wf5 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold5,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning5,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Banco 6

```{r}
vfold6 <- 
  treinamento6 %>% 
  vfold_cv(v = vv, strata = Y)

all_wf6 <-
  workflow_set(
    preproc = list(receita6),
    models = list(
      modelo_rf = randomforest,
      modelo_mlp = mlp,
      modelo_bagmlp = bag_mlp,
      modelo_poi = pois,
      modelo_svmrbf = svm_rbf,
      modelo_svmlinear = svm_linear,
      modelo_xgb = xgb
    ),
    cross = TRUE
  ) %>%
  mutate(wflow_id = gsub("(recipe_)", "", wflow_id))

tunning6 <- 
  all_wf6 %>% 
  workflow_map(
    verbose = TRUE,
    seed = 2024,
    resamples = vfold6,
    control = grid_control,
    grid = gg,
    metrics = metrica,
  )
```

## Autoplot 

```{r}
autoplot(
  tunning6,
  rank_metric = "rmse",
  metric = "rmse",
  select_best = TRUE
) + 
  labs(title = "Melhor resultado dos modelos")+ ylab("rmse")+ xlab("Ranking")

```


# Resultados:


```{r}
best1 <- tunning1 %>%
  extract_workflow_set_result("modelo_bagmlp") %>%
  select_best(metric = "rmse")

wf_final1 <-
   tunning1 %>% extract_workflow("modelo_bagmlp") %>%
   finalize_workflow(best1)

teste1 <-
   wf_final1 %>%
   last_fit(split = splitted1)

knitr::kable(teste1$.metrics, caption = "Resultados")
```





